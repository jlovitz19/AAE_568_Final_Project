%{
Convert cartesian position and velocity vectors into spherical coordinates
Inputs:
  x_cart    - State vector in cartesian frame (6x1) [m; m/s, m/s^2]
Outputs:
  x_sphere  - [r; theta; phi; dr; dtheta; dphi; ddr; ddtheta; ddphi]
  r         - radial distance [m]
  theta     - azimuth (longitude in xy-plane) [rad]
  phi       - polar angle (from +z) [rad]
  dr        - radial velocity [m/s]
  dphi      - polar angle rate [rad/s]
  dtheta    - azimuthal rate [rad/s]
  ddr       - radial acceleration [m/s^2]
  ddphi     - polar angle acceleration [rad/s^2]
  ddtheta   - azimuthal acceleration [rad/s^2]

%}
function x_sphere = cart2spherical(x_cart)

% Extract components
p_vec = x_cart(1:3,:);   % position [x; y; z]
v_vec = x_cart(4:6,:);   % velocity [vx; vy; vz]
a_vec = x_cart(7:9,:);   % acceleration [ax; ay; az]

% Individual components
x  = p_vec(1,:);  y  = p_vec(2,:);  z  = p_vec(3,:);
dx = v_vec(1,:);  dy = v_vec(2,:);  dz = v_vec(3,:);
ddx = a_vec(1,:);  ddy = a_vec(2,:);  ddz = a_vec(3,:);

% Radial distance and its derivatives
r     = vecnorm(p_vec);
dr = (2.*dx.*x + 2.*dy.*y + 2.*dz.*z)./(2.*(x.^2 + y.^2 + z.^2).^(1/2));
ddr = (2.*dx.^2 + 2.*dy.^2 + 2.*dz.^2 +...
    2.*x.*ddx + 2.*y.*ddy + 2.*z.*ddz) ./...
    (2.*(x.^2 + y.^2 + z.^2).^(1/2)) -...
    (2.*x.*dx + 2.*y.*dy + 2.*z.*dz).^2 ./...
    (4.*(x.^2 + y.^2 + z.^2).^(3/2));

% Polar angle and its derivatives
phi   = acos(z ./ r);
dphi = -(dz ./ (x.^2 + y.^2 + z.^2).^(1/2) -...
    (z .* (2.*x.*dx + 2.*y.*dy + 2.*z.*dz)) ./...
    (2 .* (x.^2 + y.^2 + z.^2).^(3/2))) ./...
    (1 - z.^2 ./ (x.^2 + y.^2 + z.^2)).^(1/2);
ddphi = -(ddz ./ (x.^2 + y.^2 + z.^2).^(1/2) ...
        - (dz .* (2.*x.*dx + 2.*y.*dy + 2.*z.*dz)) ./...
        (x.^2 + y.^2 + z.^2).^(3/2) - (z .* (2.*dx.^2 + 2.*dy.^2 +...
        2.*dz.^2 + 2.*x.*ddx + 2.*y.*ddy + 2.*z.*ddz)) ./...
        (2 .* (x.^2 + y.^2 + z.^2).^(3/2)) + (3 .* z .*...
        (2.*x.*dx + 2.*y.*dy + 2.*z.*dz).^2) ./...
        (4 .* (x.^2 + y.^2 + z.^2).^(5/2))) ...
        ./ (1 - z.^2 ./ (x.^2 + y.^2 + z.^2)).^(1/2) ...
        - ((dz ./ (x.^2 + y.^2 + z.^2).^(1/2) ...
        - (z .* (2.*x.*dx + 2.*y.*dy + 2.*z.*dz)) ./...
        (2 .* (x.^2 + y.^2 + z.^2).^(3/2))) ...
        .* ((2 .* z .* dz) ./ (x.^2 + y.^2 + z.^2) ...
        - (z.^2 .* (2.*x.*dx + 2.*y.*dy + 2.*z.*dz)) ./...
        (x.^2 + y.^2 + z.^2).^2)) ...
        ./ (2 .* (1 - z.^2 ./ (x.^2 + y.^2 + z.^2)).^(3/2));

% Azimuth angle and its derivatives
theta = sign(y).*acos(x./sqrt(x.^2+y.^2));
dtheta = (dy./x - (y.*dx)./x.^2) ./ (y.^2./x.^2 + 1);
ddtheta = (ddy./x - (2.*dx.*dy)./x.^2 + (2.*y.*dx.^2)./x.^3 -...
    (y.*ddx)./x.^2) ./ (y.^2./x.^2 + 1) - ((dy./x - (y.*dx)./x.^2) .*...
    ((2.*y.*dy)./x.^2 - (2.*y.^2.*dx)./x.^3)) ./ (y.^2./x.^2 + 1).^2;

x_sphere = [r;theta;phi;dr;dphi;dtheta;ddr;ddphi;ddtheta];

end
